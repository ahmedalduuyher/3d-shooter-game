{"ast":null,"code":"import React,{useRef,useEffect}from'react';import{extend,useThree,useFrame}from'@react-three/fiber';import{EffectComposer}from'three/examples/jsm/postprocessing/EffectComposer';import{RenderPass}from'three/examples/jsm/postprocessing/RenderPass';import{ShaderPass}from'three/examples/jsm/postprocessing/ShaderPass';import{PixelShader}from'three/examples/jsm/shaders/PixelShader';import*as THREE from'three';// Extend Three.js with postprocessing classes\nimport{jsx as _jsx}from\"react/jsx-runtime\";extend({EffectComposer,RenderPass,ShaderPass});// Custom pixel shader for pixelated rendering\nconst PixelatedShader={uniforms:{'tDiffuse':{value:null},'resolution':{value:new THREE.Vector2(800,600)},'pixelSize':{value:4.0}},vertexShader:`\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  `,fragmentShader:`\n    uniform sampler2D tDiffuse;\n    uniform vec2 resolution;\n    uniform float pixelSize;\n    varying vec2 vUv;\n    \n    void main() {\n      vec2 dxy = pixelSize / resolution;\n      vec2 coord = dxy * floor(vUv / dxy);\n      gl_FragColor = texture2D(tDiffuse, coord);\n    }\n  `};const PixelRenderer=()=>{const{gl,scene,camera,size}=useThree();const composerRef=useRef();// Set up effect composer on mount\nuseEffect(()=>{const composer=composerRef.current;composer.setSize(size.width,size.height);// Add pixel shader pass\nconst pixelPass=new ShaderPass(PixelatedShader);pixelPass.uniforms.resolution.value.set(size.width,size.height);pixelPass.uniforms.pixelSize.value=4.0;// Adjust for desired pixel size\ncomposer.addPass(pixelPass);},[size]);// Update effect composer on each frame\nuseFrame(()=>{composerRef.current.render();},1);return/*#__PURE__*/_jsx(\"effectComposer\",{ref:composerRef,args:[gl],children:/*#__PURE__*/_jsx(\"renderPass\",{attachArray:\"passes\",scene:scene,camera:camera})});};export default PixelRenderer;","map":{"version":3,"names":["React","useRef","useEffect","extend","useThree","useFrame","EffectComposer","RenderPass","ShaderPass","PixelShader","THREE","jsx","_jsx","PixelatedShader","uniforms","value","Vector2","vertexShader","fragmentShader","PixelRenderer","gl","scene","camera","size","composerRef","composer","current","setSize","width","height","pixelPass","resolution","set","pixelSize","addPass","render","ref","args","children","attachArray"],"sources":["C:/Users/ahmed/3d-shooter-game/src/game/rendering/PixelRenderer.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport { extend, useThree, useFrame } from '@react-three/fiber';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\r\nimport { PixelShader } from 'three/examples/jsm/shaders/PixelShader';\r\nimport * as THREE from 'three';\r\n\r\n// Extend Three.js with postprocessing classes\r\nextend({ EffectComposer, RenderPass, ShaderPass });\r\n\r\n// Custom pixel shader for pixelated rendering\r\nconst PixelatedShader = {\r\n  uniforms: {\r\n    'tDiffuse': { value: null },\r\n    'resolution': { value: new THREE.Vector2(800, 600) },\r\n    'pixelSize': { value: 4.0 }\r\n  },\r\n  vertexShader: `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }\r\n  `,\r\n  fragmentShader: `\r\n    uniform sampler2D tDiffuse;\r\n    uniform vec2 resolution;\r\n    uniform float pixelSize;\r\n    varying vec2 vUv;\r\n    \r\n    void main() {\r\n      vec2 dxy = pixelSize / resolution;\r\n      vec2 coord = dxy * floor(vUv / dxy);\r\n      gl_FragColor = texture2D(tDiffuse, coord);\r\n    }\r\n  `\r\n};\r\n\r\nconst PixelRenderer = () => {\r\n  const { gl, scene, camera, size } = useThree();\r\n  const composerRef = useRef();\r\n  \r\n  // Set up effect composer on mount\r\n  useEffect(() => {\r\n    const composer = composerRef.current;\r\n    composer.setSize(size.width, size.height);\r\n    \r\n    // Add pixel shader pass\r\n    const pixelPass = new ShaderPass(PixelatedShader);\r\n    pixelPass.uniforms.resolution.value.set(size.width, size.height);\r\n    pixelPass.uniforms.pixelSize.value = 4.0; // Adjust for desired pixel size\r\n    \r\n    composer.addPass(pixelPass);\r\n  }, [size]);\r\n  \r\n  // Update effect composer on each frame\r\n  useFrame(() => {\r\n    composerRef.current.render();\r\n  }, 1);\r\n  \r\n  return (\r\n    <effectComposer ref={composerRef} args={[gl]}>\r\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\r\n    </effectComposer>\r\n  );\r\n};\r\n\r\nexport default PixelRenderer;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,MAAM,CAAEC,SAAS,KAAQ,OAAO,CAChD,OAASC,MAAM,CAAEC,QAAQ,CAAEC,QAAQ,KAAQ,oBAAoB,CAC/D,OAASC,cAAc,KAAQ,kDAAkD,CACjF,OAASC,UAAU,KAAQ,8CAA8C,CACzE,OAASC,UAAU,KAAQ,8CAA8C,CACzE,OAASC,WAAW,KAAQ,wCAAwC,CACpE,MAAO,GAAK,CAAAC,KAAK,KAAM,OAAO,CAE9B;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACAT,MAAM,CAAC,CAAEG,cAAc,CAAEC,UAAU,CAAEC,UAAW,CAAC,CAAC,CAElD;AACA,KAAM,CAAAK,eAAe,CAAG,CACtBC,QAAQ,CAAE,CACR,UAAU,CAAE,CAAEC,KAAK,CAAE,IAAK,CAAC,CAC3B,YAAY,CAAE,CAAEA,KAAK,CAAE,GAAI,CAAAL,KAAK,CAACM,OAAO,CAAC,GAAG,CAAE,GAAG,CAAE,CAAC,CACpD,WAAW,CAAE,CAAED,KAAK,CAAE,GAAI,CAC5B,CAAC,CACDE,YAAY,CAAE;AAChB;AACA;AACA;AACA;AACA;AACA,GAAG,CACDC,cAAc,CAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,CAAC,CAED,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CAC1B,KAAM,CAAEC,EAAE,CAAEC,KAAK,CAAEC,MAAM,CAAEC,IAAK,CAAC,CAAGnB,QAAQ,CAAC,CAAC,CAC9C,KAAM,CAAAoB,WAAW,CAAGvB,MAAM,CAAC,CAAC,CAE5B;AACAC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAuB,QAAQ,CAAGD,WAAW,CAACE,OAAO,CACpCD,QAAQ,CAACE,OAAO,CAACJ,IAAI,CAACK,KAAK,CAAEL,IAAI,CAACM,MAAM,CAAC,CAEzC;AACA,KAAM,CAAAC,SAAS,CAAG,GAAI,CAAAtB,UAAU,CAACK,eAAe,CAAC,CACjDiB,SAAS,CAAChB,QAAQ,CAACiB,UAAU,CAAChB,KAAK,CAACiB,GAAG,CAACT,IAAI,CAACK,KAAK,CAAEL,IAAI,CAACM,MAAM,CAAC,CAChEC,SAAS,CAAChB,QAAQ,CAACmB,SAAS,CAAClB,KAAK,CAAG,GAAG,CAAE;AAE1CU,QAAQ,CAACS,OAAO,CAACJ,SAAS,CAAC,CAC7B,CAAC,CAAE,CAACP,IAAI,CAAC,CAAC,CAEV;AACAlB,QAAQ,CAAC,IAAM,CACbmB,WAAW,CAACE,OAAO,CAACS,MAAM,CAAC,CAAC,CAC9B,CAAC,CAAE,CAAC,CAAC,CAEL,mBACEvB,IAAA,mBAAgBwB,GAAG,CAAEZ,WAAY,CAACa,IAAI,CAAE,CAACjB,EAAE,CAAE,CAAAkB,QAAA,cAC3C1B,IAAA,eAAY2B,WAAW,CAAC,QAAQ,CAAClB,KAAK,CAAEA,KAAM,CAACC,MAAM,CAAEA,MAAO,CAAE,CAAC,CACnD,CAAC,CAErB,CAAC,CAED,cAAe,CAAAH,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}