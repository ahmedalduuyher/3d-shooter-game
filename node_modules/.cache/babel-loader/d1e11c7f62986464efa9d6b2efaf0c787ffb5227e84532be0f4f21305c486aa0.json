{"ast":null,"code":"import React,{useRef,useState,useEffect}from'react';import{Canvas,useFrame,useThree}from'@react-three/fiber';import{Physics}from'@react-three/cannon';// Import rendering components\nimport PixelRenderer from'../rendering';import CameraController from'../rendering';import LightingSetup from'../rendering';// Game components\nimport Player from'./players/Player';import Map from'./maps/Map';import WeaponSystem from'./weapons/WeaponSystem';import MultiplayerManager from'./multiplayer/MultiplayerManager';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const Game=_ref=>{var _gameState$teams$red;let{playerName,inviteCode,controls}=_ref;// Player reference for camera following\nconst playerRef=useRef();const[gameState,setGameState]=useState({players:[],currentMap:'winter',// Default map\ntimeRemaining:600,// 10 minutes in seconds\nteams:{red:[],blue:[]},weapons:[],scores:{}});// Initialize game\nuseEffect(()=>{// Initialize multiplayer connection\nconsole.log(`Player ${playerName} joining game with invite code: ${inviteCode||'none'}`);// Set up game timer\nconst timerInterval=setInterval(()=>{setGameState(prev=>{const newTimeRemaining=prev.timeRemaining-1;// Check if game is over\nif(newTimeRemaining<=0){clearInterval(timerInterval);endGame();}return{...prev,timeRemaining:newTimeRemaining};});},1000);// Update UI timer\nconst updateUITimer=()=>{const minutes=Math.floor(gameState.timeRemaining/60);const seconds=gameState.timeRemaining%60;const timerElement=document.querySelector('.game-timer');if(timerElement){timerElement.textContent=`${minutes}:${seconds.toString().padStart(2,'0')}`;}};const uiInterval=setInterval(updateUITimer,1000);// Cleanup on unmount\nreturn()=>{clearInterval(timerInterval);clearInterval(uiInterval);};},[playerName,inviteCode]);// End game and show results\nconst endGame=()=>{// Sort players by kills\nconst sortedPlayers=Object.entries(gameState.scores).sort((a,b)=>b[1].kills-a[1].kills).slice(0,3);// Get top 3\n// Update UI\nconst gameEndElement=document.querySelector('.game-end');if(gameEndElement){gameEndElement.style.display='block';// Update top players\nconst topPlayerElements=gameEndElement.querySelectorAll('.top-player');sortedPlayers.forEach((player,index)=>{if(topPlayerElements[index]){const[name,score]=player;topPlayerElements[index].querySelector('p').textContent=`${name} - ${score.kills} kills`;}});// Restart game after 10 seconds\nsetTimeout(()=>{gameEndElement.style.display='none';// Reset game state with new map\nsetGameState(prev=>({...prev,currentMap:prev.currentMap==='winter'?'grass':'winter',timeRemaining:600}));},10000);}};// Handle multiplayer events\nconst handlePlayerJoin=player=>{console.log(`Player joined: ${player.name}`);// Add player to game state\n};const handlePlayerLeave=player=>{console.log(`Player left: ${player.name}`);// Remove player from game state\n};const handleGameStateUpdate=newState=>{console.log('Game state updated:',newState);setGameState(prev=>({...prev,players:newState.players||prev.players,teams:newState.teams||prev.teams}));};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(LightingSetup,{}),/*#__PURE__*/_jsx(CameraController,{playerRef:playerRef}),/*#__PURE__*/_jsx(PixelRenderer,{}),/*#__PURE__*/_jsxs(Physics,{children:[/*#__PURE__*/_jsx(Map,{mapName:gameState.currentMap}),/*#__PURE__*/_jsx(Player,{ref:playerRef,name:playerName,team:(_gameState$teams$red=gameState.teams.red)!==null&&_gameState$teams$red!==void 0&&_gameState$teams$red.includes(playerName)?'red':'blue',position:[0,1,0],controls:controls}),/*#__PURE__*/_jsx(WeaponSystem,{player:playerRef}),/*#__PURE__*/_jsx(MultiplayerManager,{playerName:playerName,inviteCode:inviteCode,onPlayerJoin:handlePlayerJoin,onPlayerLeave:handlePlayerLeave,onGameStateUpdate:handleGameStateUpdate})]})]});};export default Game;","map":{"version":3,"names":["React","useRef","useState","useEffect","Canvas","useFrame","useThree","Physics","PixelRenderer","CameraController","LightingSetup","Player","Map","WeaponSystem","MultiplayerManager","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Game","_ref","_gameState$teams$red","playerName","inviteCode","controls","playerRef","gameState","setGameState","players","currentMap","timeRemaining","teams","red","blue","weapons","scores","console","log","timerInterval","setInterval","prev","newTimeRemaining","clearInterval","endGame","updateUITimer","minutes","Math","floor","seconds","timerElement","document","querySelector","textContent","toString","padStart","uiInterval","sortedPlayers","Object","entries","sort","a","b","kills","slice","gameEndElement","style","display","topPlayerElements","querySelectorAll","forEach","player","index","name","score","setTimeout","handlePlayerJoin","handlePlayerLeave","handleGameStateUpdate","newState","children","mapName","ref","team","includes","position","onPlayerJoin","onPlayerLeave","onGameStateUpdate"],"sources":["C:/Users/ahmed/3d-shooter-game/src/game/Game.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport { Canvas, useFrame, useThree } from '@react-three/fiber';\r\nimport { Physics } from '@react-three/cannon';\r\n\r\n// Import rendering components\r\nimport PixelRenderer from '../rendering';\r\nimport CameraController from '../rendering';\r\nimport LightingSetup from '../rendering';\r\n\r\n// Game components\r\nimport Player from './players/Player';\r\nimport Map from './maps/Map';\r\nimport WeaponSystem from './weapons/WeaponSystem';\r\nimport MultiplayerManager from './multiplayer/MultiplayerManager';\r\n\r\nconst Game = ({ playerName, inviteCode, controls }) => {\r\n  // Player reference for camera following\r\n  const playerRef = useRef();\r\n  \r\n  const [gameState, setGameState] = useState({\r\n    players: [],\r\n    currentMap: 'winter', // Default map\r\n    timeRemaining: 600, // 10 minutes in seconds\r\n    teams: {\r\n      red: [],\r\n      blue: []\r\n    },\r\n    weapons: [],\r\n    scores: {}\r\n  });\r\n\r\n  // Initialize game\r\n  useEffect(() => {\r\n    // Initialize multiplayer connection\r\n    console.log(`Player ${playerName} joining game with invite code: ${inviteCode || 'none'}`);\r\n    \r\n    // Set up game timer\r\n    const timerInterval = setInterval(() => {\r\n      setGameState(prev => {\r\n        const newTimeRemaining = prev.timeRemaining - 1;\r\n        \r\n        // Check if game is over\r\n        if (newTimeRemaining <= 0) {\r\n          clearInterval(timerInterval);\r\n          endGame();\r\n        }\r\n        \r\n        return {\r\n          ...prev,\r\n          timeRemaining: newTimeRemaining\r\n        };\r\n      });\r\n    }, 1000);\r\n    \r\n    // Update UI timer\r\n    const updateUITimer = () => {\r\n      const minutes = Math.floor(gameState.timeRemaining / 60);\r\n      const seconds = gameState.timeRemaining % 60;\r\n      const timerElement = document.querySelector('.game-timer');\r\n      if (timerElement) {\r\n        timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;\r\n      }\r\n    };\r\n    \r\n    const uiInterval = setInterval(updateUITimer, 1000);\r\n    \r\n    // Cleanup on unmount\r\n    return () => {\r\n      clearInterval(timerInterval);\r\n      clearInterval(uiInterval);\r\n    };\r\n  }, [playerName, inviteCode]);\r\n  \r\n  // End game and show results\r\n  const endGame = () => {\r\n    // Sort players by kills\r\n    const sortedPlayers = Object.entries(gameState.scores)\r\n      .sort((a, b) => b[1].kills - a[1].kills)\r\n      .slice(0, 3); // Get top 3\r\n    \r\n    // Update UI\r\n    const gameEndElement = document.querySelector('.game-end');\r\n    if (gameEndElement) {\r\n      gameEndElement.style.display = 'block';\r\n      \r\n      // Update top players\r\n      const topPlayerElements = gameEndElement.querySelectorAll('.top-player');\r\n      sortedPlayers.forEach((player, index) => {\r\n        if (topPlayerElements[index]) {\r\n          const [name, score] = player;\r\n          topPlayerElements[index].querySelector('p').textContent = `${name} - ${score.kills} kills`;\r\n        }\r\n      });\r\n      \r\n      // Restart game after 10 seconds\r\n      setTimeout(() => {\r\n        gameEndElement.style.display = 'none';\r\n        // Reset game state with new map\r\n        setGameState(prev => ({\r\n          ...prev,\r\n          currentMap: prev.currentMap === 'winter' ? 'grass' : 'winter',\r\n          timeRemaining: 600\r\n        }));\r\n      }, 10000);\r\n    }\r\n  };\r\n\r\n  // Handle multiplayer events\r\n  const handlePlayerJoin = (player) => {\r\n    console.log(`Player joined: ${player.name}`);\r\n    // Add player to game state\r\n  };\r\n\r\n  const handlePlayerLeave = (player) => {\r\n    console.log(`Player left: ${player.name}`);\r\n    // Remove player from game state\r\n  };\r\n\r\n  const handleGameStateUpdate = (newState) => {\r\n    console.log('Game state updated:', newState);\r\n    setGameState(prev => ({\r\n      ...prev,\r\n      players: newState.players || prev.players,\r\n      teams: newState.teams || prev.teams\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Rendering setup */}\r\n      <LightingSetup />\r\n      <CameraController playerRef={playerRef} />\r\n      <PixelRenderer />\r\n      \r\n      {/* Physics world */}\r\n      <Physics>\r\n        {/* Current map */}\r\n        <Map mapName={gameState.currentMap} />\r\n        \r\n        {/* Player */}\r\n        <Player \r\n          ref={playerRef}\r\n          name={playerName}\r\n          team={gameState.teams.red?.includes(playerName) ? 'red' : 'blue'}\r\n          position={[0, 1, 0]}\r\n          controls={controls}\r\n        />\r\n        \r\n        {/* Weapon system */}\r\n        <WeaponSystem player={playerRef} />\r\n        \r\n        {/* Multiplayer manager (non-visual component) */}\r\n        <MultiplayerManager\r\n          playerName={playerName}\r\n          inviteCode={inviteCode}\r\n          onPlayerJoin={handlePlayerJoin}\r\n          onPlayerLeave={handlePlayerLeave}\r\n          onGameStateUpdate={handleGameStateUpdate}\r\n        />\r\n      </Physics>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,MAAM,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC1D,OAASC,MAAM,CAAEC,QAAQ,CAAEC,QAAQ,KAAQ,oBAAoB,CAC/D,OAASC,OAAO,KAAQ,qBAAqB,CAE7C;AACA,MAAO,CAAAC,aAAa,KAAM,cAAc,CACxC,MAAO,CAAAC,gBAAgB,KAAM,cAAc,CAC3C,MAAO,CAAAC,aAAa,KAAM,cAAc,CAExC;AACA,MAAO,CAAAC,MAAM,KAAM,kBAAkB,CACrC,MAAO,CAAAC,GAAG,KAAM,YAAY,CAC5B,MAAO,CAAAC,YAAY,KAAM,wBAAwB,CACjD,MAAO,CAAAC,kBAAkB,KAAM,kCAAkC,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAElE,KAAM,CAAAC,IAAI,CAAGC,IAAA,EAA0C,KAAAC,oBAAA,IAAzC,CAAEC,UAAU,CAAEC,UAAU,CAAEC,QAAS,CAAC,CAAAJ,IAAA,CAChD;AACA,KAAM,CAAAK,SAAS,CAAG1B,MAAM,CAAC,CAAC,CAE1B,KAAM,CAAC2B,SAAS,CAAEC,YAAY,CAAC,CAAG3B,QAAQ,CAAC,CACzC4B,OAAO,CAAE,EAAE,CACXC,UAAU,CAAE,QAAQ,CAAE;AACtBC,aAAa,CAAE,GAAG,CAAE;AACpBC,KAAK,CAAE,CACLC,GAAG,CAAE,EAAE,CACPC,IAAI,CAAE,EACR,CAAC,CACDC,OAAO,CAAE,EAAE,CACXC,MAAM,CAAE,CAAC,CACX,CAAC,CAAC,CAEF;AACAlC,SAAS,CAAC,IAAM,CACd;AACAmC,OAAO,CAACC,GAAG,CAAC,UAAUf,UAAU,mCAAmCC,UAAU,EAAI,MAAM,EAAE,CAAC,CAE1F;AACA,KAAM,CAAAe,aAAa,CAAGC,WAAW,CAAC,IAAM,CACtCZ,YAAY,CAACa,IAAI,EAAI,CACnB,KAAM,CAAAC,gBAAgB,CAAGD,IAAI,CAACV,aAAa,CAAG,CAAC,CAE/C;AACA,GAAIW,gBAAgB,EAAI,CAAC,CAAE,CACzBC,aAAa,CAACJ,aAAa,CAAC,CAC5BK,OAAO,CAAC,CAAC,CACX,CAEA,MAAO,CACL,GAAGH,IAAI,CACPV,aAAa,CAAEW,gBACjB,CAAC,CACH,CAAC,CAAC,CACJ,CAAC,CAAE,IAAI,CAAC,CAER;AACA,KAAM,CAAAG,aAAa,CAAGA,CAAA,GAAM,CAC1B,KAAM,CAAAC,OAAO,CAAGC,IAAI,CAACC,KAAK,CAACrB,SAAS,CAACI,aAAa,CAAG,EAAE,CAAC,CACxD,KAAM,CAAAkB,OAAO,CAAGtB,SAAS,CAACI,aAAa,CAAG,EAAE,CAC5C,KAAM,CAAAmB,YAAY,CAAGC,QAAQ,CAACC,aAAa,CAAC,aAAa,CAAC,CAC1D,GAAIF,YAAY,CAAE,CAChBA,YAAY,CAACG,WAAW,CAAG,GAAGP,OAAO,IAAIG,OAAO,CAACK,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,EAAE,CAChF,CACF,CAAC,CAED,KAAM,CAAAC,UAAU,CAAGhB,WAAW,CAACK,aAAa,CAAE,IAAI,CAAC,CAEnD;AACA,MAAO,IAAM,CACXF,aAAa,CAACJ,aAAa,CAAC,CAC5BI,aAAa,CAACa,UAAU,CAAC,CAC3B,CAAC,CACH,CAAC,CAAE,CAACjC,UAAU,CAAEC,UAAU,CAAC,CAAC,CAE5B;AACA,KAAM,CAAAoB,OAAO,CAAGA,CAAA,GAAM,CACpB;AACA,KAAM,CAAAa,aAAa,CAAGC,MAAM,CAACC,OAAO,CAAChC,SAAS,CAACS,MAAM,CAAC,CACnDwB,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKA,CAAC,CAAC,CAAC,CAAC,CAACC,KAAK,CAAGF,CAAC,CAAC,CAAC,CAAC,CAACE,KAAK,CAAC,CACvCC,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE;AAEhB;AACA,KAAM,CAAAC,cAAc,CAAGd,QAAQ,CAACC,aAAa,CAAC,WAAW,CAAC,CAC1D,GAAIa,cAAc,CAAE,CAClBA,cAAc,CAACC,KAAK,CAACC,OAAO,CAAG,OAAO,CAEtC;AACA,KAAM,CAAAC,iBAAiB,CAAGH,cAAc,CAACI,gBAAgB,CAAC,aAAa,CAAC,CACxEZ,aAAa,CAACa,OAAO,CAAC,CAACC,MAAM,CAAEC,KAAK,GAAK,CACvC,GAAIJ,iBAAiB,CAACI,KAAK,CAAC,CAAE,CAC5B,KAAM,CAACC,IAAI,CAAEC,KAAK,CAAC,CAAGH,MAAM,CAC5BH,iBAAiB,CAACI,KAAK,CAAC,CAACpB,aAAa,CAAC,GAAG,CAAC,CAACC,WAAW,CAAG,GAAGoB,IAAI,MAAMC,KAAK,CAACX,KAAK,QAAQ,CAC5F,CACF,CAAC,CAAC,CAEF;AACAY,UAAU,CAAC,IAAM,CACfV,cAAc,CAACC,KAAK,CAACC,OAAO,CAAG,MAAM,CACrC;AACAvC,YAAY,CAACa,IAAI,GAAK,CACpB,GAAGA,IAAI,CACPX,UAAU,CAAEW,IAAI,CAACX,UAAU,GAAK,QAAQ,CAAG,OAAO,CAAG,QAAQ,CAC7DC,aAAa,CAAE,GACjB,CAAC,CAAC,CAAC,CACL,CAAC,CAAE,KAAK,CAAC,CACX,CACF,CAAC,CAED;AACA,KAAM,CAAA6C,gBAAgB,CAAIL,MAAM,EAAK,CACnClC,OAAO,CAACC,GAAG,CAAC,kBAAkBiC,MAAM,CAACE,IAAI,EAAE,CAAC,CAC5C;AACF,CAAC,CAED,KAAM,CAAAI,iBAAiB,CAAIN,MAAM,EAAK,CACpClC,OAAO,CAACC,GAAG,CAAC,gBAAgBiC,MAAM,CAACE,IAAI,EAAE,CAAC,CAC1C;AACF,CAAC,CAED,KAAM,CAAAK,qBAAqB,CAAIC,QAAQ,EAAK,CAC1C1C,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAEyC,QAAQ,CAAC,CAC5CnD,YAAY,CAACa,IAAI,GAAK,CACpB,GAAGA,IAAI,CACPZ,OAAO,CAAEkD,QAAQ,CAAClD,OAAO,EAAIY,IAAI,CAACZ,OAAO,CACzCG,KAAK,CAAE+C,QAAQ,CAAC/C,KAAK,EAAIS,IAAI,CAACT,KAChC,CAAC,CAAC,CAAC,CACL,CAAC,CAED,mBACEf,KAAA,CAAAE,SAAA,EAAA6D,QAAA,eAEEjE,IAAA,CAACN,aAAa,GAAE,CAAC,cACjBM,IAAA,CAACP,gBAAgB,EAACkB,SAAS,CAAEA,SAAU,CAAE,CAAC,cAC1CX,IAAA,CAACR,aAAa,GAAE,CAAC,cAGjBU,KAAA,CAACX,OAAO,EAAA0E,QAAA,eAENjE,IAAA,CAACJ,GAAG,EAACsE,OAAO,CAAEtD,SAAS,CAACG,UAAW,CAAE,CAAC,cAGtCf,IAAA,CAACL,MAAM,EACLwE,GAAG,CAAExD,SAAU,CACf+C,IAAI,CAAElD,UAAW,CACjB4D,IAAI,CAAE,CAAA7D,oBAAA,CAAAK,SAAS,CAACK,KAAK,CAACC,GAAG,UAAAX,oBAAA,WAAnBA,oBAAA,CAAqB8D,QAAQ,CAAC7D,UAAU,CAAC,CAAG,KAAK,CAAG,MAAO,CACjE8D,QAAQ,CAAE,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CACpB5D,QAAQ,CAAEA,QAAS,CACpB,CAAC,cAGFV,IAAA,CAACH,YAAY,EAAC2D,MAAM,CAAE7C,SAAU,CAAE,CAAC,cAGnCX,IAAA,CAACF,kBAAkB,EACjBU,UAAU,CAAEA,UAAW,CACvBC,UAAU,CAAEA,UAAW,CACvB8D,YAAY,CAAEV,gBAAiB,CAC/BW,aAAa,CAAEV,iBAAkB,CACjCW,iBAAiB,CAAEV,qBAAsB,CAC1C,CAAC,EACK,CAAC,EACV,CAAC,CAEP,CAAC,CAED,cAAe,CAAA1D,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}