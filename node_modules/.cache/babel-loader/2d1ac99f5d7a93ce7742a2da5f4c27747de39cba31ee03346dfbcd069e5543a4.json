{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{io}from'socket.io-client';// This is a more comprehensive implementation of the multiplayer manager\nconst MultiplayerManager=_ref=>{let{playerName,inviteCode,onPlayerJoin,onPlayerLeave,onGameStateUpdate,onGameEnd}=_ref;const[socket,setSocket]=useState(null);const[connected,setConnected]=useState(false);const[players,setPlayers]=useState([]);const[gameId,setGameId]=useState(null);const[teams,setTeams]=useState({red:[],blue:[]});const[scores,setScores]=useState({});const[gameTime,setGameTime]=useState(600);// 10 minutes in seconds\nconst gameTimerRef=useRef(null);// Initialize socket connection\nuseEffect(()=>{// In a real implementation, this would connect to an actual server\n// For now, we'll simulate the multiplayer functionality\nconsole.log('Initializing multiplayer connection...');// Simulate socket connection\nconst simulatedSocket={id:`socket_${Math.random().toString(36).substr(2,9)}`,emit:(event,data)=>{console.log(`Emitting ${event}:`,data);// Simulate server response\nif(event==='join_game'){setTimeout(()=>{handleJoinGame(data);},500);}else if(event==='player_shoot'){// Simulate shot processing\nconsole.log('Processing shot from player',playerName);}else if(event==='update_position'){// Simulate position update\n// In a real implementation, this would be broadcast to other players\n}},on:(event,callback)=>{console.log(`Listening for ${event}`);// Store callbacks for simulated events\nif(event==='player_joined'){// Simulate other players joining occasionally\nconst interval=setInterval(()=>{if(Math.random()<0.1&&players.length<8){const newPlayer={id:`player_${Math.random().toString(36).substr(2,9)}`,name:`Player${Math.floor(Math.random()*100)}`,team:teams.red.length<=teams.blue.length?'red':'blue',kills:0,deaths:0};callback(newPlayer);}},10000);return()=>clearInterval(interval);}},disconnect:()=>{console.log('Disconnecting socket');}};setSocket(simulatedSocket);setConnected(true);return()=>{if(simulatedSocket){simulatedSocket.disconnect();}};},[]);// Join game when connected\nuseEffect(()=>{if(connected&&socket&&playerName){console.log(`Player ${playerName} attempting to join game`);// Join with invite code or find a game\nsocket.emit('join_game',{playerName,inviteCode:inviteCode||null});}},[connected,socket,playerName,inviteCode]);// Simulate joining a game\nconst handleJoinGame=data=>{// Generate a random game ID if no invite code\nconst gameId=data.inviteCode||`game_${Math.random().toString(36).substr(2,9)}`;setGameId(gameId);// Determine which team to join (balance teams)\nconst redTeam=[];const blueTeam=[];// Add some simulated players\nconst simulatedPlayers=[{id:'player1',name:'Player1',team:'red',kills:0,deaths:0},{id:'player2',name:'Player2',team:'blue',kills:0,deaths:0},{id:'player3',name:'Player3',team:'red',kills:0,deaths:0},{id:'player4',name:'Player4',team:'blue',kills:0,deaths:0}];// Assign teams\nsimulatedPlayers.forEach(player=>{if(player.team==='red'){redTeam.push(player.name);}else{blueTeam.push(player.name);}});// Add the current player to the team with fewer players\nconst currentPlayerTeam=redTeam.length<=blueTeam.length?'red':'blue';const currentPlayer={id:socket.id,name:data.playerName,team:currentPlayerTeam,kills:0,deaths:0};if(currentPlayerTeam==='red'){redTeam.push(currentPlayer.name);}else{blueTeam.push(currentPlayer.name);}// Update state\nsetPlayers([...simulatedPlayers,currentPlayer]);setTeams({red:redTeam,blue:blueTeam});// Initialize scores\nconst initialScores={};[...simulatedPlayers,currentPlayer].forEach(player=>{initialScores[player.name]={kills:0,deaths:0};});setScores(initialScores);// Notify parent component\nif(onPlayerJoin){simulatedPlayers.forEach(player=>{onPlayerJoin(player);});}// Update game state\nif(onGameStateUpdate){onGameStateUpdate({gameId,players:[...simulatedPlayers,currentPlayer],teams:{red:redTeam,blue:blueTeam},scores:initialScores});}// Start game timer\nstartGameTimer();console.log(`Joined game ${gameId} with ${simulatedPlayers.length+1} players`);};// Start the game timer\nconst startGameTimer=()=>{setGameTime(600);// 10 minutes\n// Clear any existing timer\nif(gameTimerRef.current){clearInterval(gameTimerRef.current);}// Start countdown\ngameTimerRef.current=setInterval(()=>{setGameTime(prevTime=>{const newTime=prevTime-1;// Update UI timer\nconst minutes=Math.floor(newTime/60);const seconds=newTime%60;const timerElement=document.querySelector('.game-timer');if(timerElement){timerElement.textContent=`${minutes}:${seconds.toString().padStart(2,'0')}`;}// Check if game is over\nif(newTime<=0){endGame();return 0;}return newTime;});},1000);};// End the game\nconst endGame=()=>{// Clear timer\nif(gameTimerRef.current){clearInterval(gameTimerRef.current);gameTimerRef.current=null;}// Sort players by kills\nconst sortedPlayers=Object.entries(scores).sort((a,b)=>b[1].kills-a[1].kills).slice(0,3);// Get top 3\n// Notify parent component\nif(onGameEnd){onGameEnd(sortedPlayers);}// After 10 seconds, start a new game\nsetTimeout(()=>{// Reset scores\nconst resetScores={};players.forEach(player=>{resetScores[player.name]={kills:0,deaths:0};});setScores(resetScores);// Start new game timer\nstartGameTimer();// Update game state with new map\nif(onGameStateUpdate){onGameStateUpdate({gameId,players,teams,scores:resetScores,newMap:true// Signal to change map\n});}},10000);};// Generate an invite code for others to join\nconst generateInviteCode=()=>{return gameId||`invite_${Math.random().toString(36).substr(2,8).toUpperCase()}`;};// Update player position\nconst updatePlayerPosition=(position,rotation)=>{if(connected&&socket){socket.emit('update_position',{position,rotation});}};// Handle player shooting\nconst handlePlayerShoot=(weaponType,position,direction)=>{if(connected&&socket){socket.emit('player_shoot',{weaponType,position,direction});}};// Handle player kill\nconst handlePlayerKill=(killer,victim)=>{// Update scores\nsetScores(prev=>{const newScores={...prev};// Increment killer's kills\nif(newScores[killer]){newScores[killer].kills+=1;}// Increment victim's deaths\nif(newScores[victim]){newScores[victim].deaths+=1;}return newScores;});// Update scoreboard UI\nupdateScoreboard();};// Update the scoreboard UI\nconst updateScoreboard=()=>{const scoreboard=document.querySelector('.scoreboard tbody');if(!scoreboard)return;// Clear existing rows\nscoreboard.innerHTML='';// Add player rows\nplayers.forEach(player=>{const playerScore=scores[player.name]||{kills:0,deaths:0};const row=document.createElement('tr');row.className=`team-${player.team}`;row.innerHTML=`\n        <td>${player.name}</td>\n        <td>${player.team}</td>\n        <td>${playerScore.kills}</td>\n        <td>${playerScore.deaths}</td>\n      `;scoreboard.appendChild(row);});};// Clean up on unmount\nuseEffect(()=>{return()=>{if(gameTimerRef.current){clearInterval(gameTimerRef.current);}};},[]);return null;// This component doesn't render anything\n};export default MultiplayerManager;","map":{"version":3,"names":["React","useState","useEffect","useRef","io","MultiplayerManager","_ref","playerName","inviteCode","onPlayerJoin","onPlayerLeave","onGameStateUpdate","onGameEnd","socket","setSocket","connected","setConnected","players","setPlayers","gameId","setGameId","teams","setTeams","red","blue","scores","setScores","gameTime","setGameTime","gameTimerRef","console","log","simulatedSocket","id","Math","random","toString","substr","emit","event","data","setTimeout","handleJoinGame","on","callback","interval","setInterval","length","newPlayer","name","floor","team","kills","deaths","clearInterval","disconnect","redTeam","blueTeam","simulatedPlayers","forEach","player","push","currentPlayerTeam","currentPlayer","initialScores","startGameTimer","current","prevTime","newTime","minutes","seconds","timerElement","document","querySelector","textContent","padStart","endGame","sortedPlayers","Object","entries","sort","a","b","slice","resetScores","newMap","generateInviteCode","toUpperCase","updatePlayerPosition","position","rotation","handlePlayerShoot","weaponType","direction","handlePlayerKill","killer","victim","prev","newScores","updateScoreboard","scoreboard","innerHTML","playerScore","row","createElement","className","appendChild"],"sources":["C:/Users/ahmed/3d-shooter-game/src/game/multiplayer/MultiplayerManager.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { io } from 'socket.io-client';\r\n\r\n// This is a more comprehensive implementation of the multiplayer manager\r\nconst MultiplayerManager = ({ \r\n  playerName, \r\n  inviteCode, \r\n  onPlayerJoin, \r\n  onPlayerLeave, \r\n  onGameStateUpdate,\r\n  onGameEnd\r\n}) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [connected, setConnected] = useState(false);\r\n  const [players, setPlayers] = useState([]);\r\n  const [gameId, setGameId] = useState(null);\r\n  const [teams, setTeams] = useState({ red: [], blue: [] });\r\n  const [scores, setScores] = useState({});\r\n  const [gameTime, setGameTime] = useState(600); // 10 minutes in seconds\r\n  const gameTimerRef = useRef(null);\r\n\r\n  // Initialize socket connection\r\n  useEffect(() => {\r\n    // In a real implementation, this would connect to an actual server\r\n    // For now, we'll simulate the multiplayer functionality\r\n    console.log('Initializing multiplayer connection...');\r\n    \r\n    // Simulate socket connection\r\n    const simulatedSocket = {\r\n      id: `socket_${Math.random().toString(36).substr(2, 9)}`,\r\n      emit: (event, data) => {\r\n        console.log(`Emitting ${event}:`, data);\r\n        // Simulate server response\r\n        if (event === 'join_game') {\r\n          setTimeout(() => {\r\n            handleJoinGame(data);\r\n          }, 500);\r\n        } else if (event === 'player_shoot') {\r\n          // Simulate shot processing\r\n          console.log('Processing shot from player', playerName);\r\n        } else if (event === 'update_position') {\r\n          // Simulate position update\r\n          // In a real implementation, this would be broadcast to other players\r\n        }\r\n      },\r\n      on: (event, callback) => {\r\n        console.log(`Listening for ${event}`);\r\n        // Store callbacks for simulated events\r\n        if (event === 'player_joined') {\r\n          // Simulate other players joining occasionally\r\n          const interval = setInterval(() => {\r\n            if (Math.random() < 0.1 && players.length < 8) {\r\n              const newPlayer = {\r\n                id: `player_${Math.random().toString(36).substr(2, 9)}`,\r\n                name: `Player${Math.floor(Math.random() * 100)}`,\r\n                team: teams.red.length <= teams.blue.length ? 'red' : 'blue',\r\n                kills: 0,\r\n                deaths: 0\r\n              };\r\n              \r\n              callback(newPlayer);\r\n            }\r\n          }, 10000);\r\n          \r\n          return () => clearInterval(interval);\r\n        }\r\n      },\r\n      disconnect: () => {\r\n        console.log('Disconnecting socket');\r\n      }\r\n    };\r\n    \r\n    setSocket(simulatedSocket);\r\n    setConnected(true);\r\n    \r\n    return () => {\r\n      if (simulatedSocket) {\r\n        simulatedSocket.disconnect();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Join game when connected\r\n  useEffect(() => {\r\n    if (connected && socket && playerName) {\r\n      console.log(`Player ${playerName} attempting to join game`);\r\n      \r\n      // Join with invite code or find a game\r\n      socket.emit('join_game', {\r\n        playerName,\r\n        inviteCode: inviteCode || null\r\n      });\r\n    }\r\n  }, [connected, socket, playerName, inviteCode]);\r\n\r\n  // Simulate joining a game\r\n  const handleJoinGame = (data) => {\r\n    // Generate a random game ID if no invite code\r\n    const gameId = data.inviteCode || `game_${Math.random().toString(36).substr(2, 9)}`;\r\n    setGameId(gameId);\r\n    \r\n    // Determine which team to join (balance teams)\r\n    const redTeam = [];\r\n    const blueTeam = [];\r\n    \r\n    // Add some simulated players\r\n    const simulatedPlayers = [\r\n      { id: 'player1', name: 'Player1', team: 'red', kills: 0, deaths: 0 },\r\n      { id: 'player2', name: 'Player2', team: 'blue', kills: 0, deaths: 0 },\r\n      { id: 'player3', name: 'Player3', team: 'red', kills: 0, deaths: 0 },\r\n      { id: 'player4', name: 'Player4', team: 'blue', kills: 0, deaths: 0 },\r\n    ];\r\n    \r\n    // Assign teams\r\n    simulatedPlayers.forEach(player => {\r\n      if (player.team === 'red') {\r\n        redTeam.push(player.name);\r\n      } else {\r\n        blueTeam.push(player.name);\r\n      }\r\n    });\r\n    \r\n    // Add the current player to the team with fewer players\r\n    const currentPlayerTeam = redTeam.length <= blueTeam.length ? 'red' : 'blue';\r\n    const currentPlayer = { \r\n      id: socket.id, \r\n      name: data.playerName, \r\n      team: currentPlayerTeam,\r\n      kills: 0, \r\n      deaths: 0 \r\n    };\r\n    \r\n    if (currentPlayerTeam === 'red') {\r\n      redTeam.push(currentPlayer.name);\r\n    } else {\r\n      blueTeam.push(currentPlayer.name);\r\n    }\r\n    \r\n    // Update state\r\n    setPlayers([...simulatedPlayers, currentPlayer]);\r\n    setTeams({\r\n      red: redTeam,\r\n      blue: blueTeam\r\n    });\r\n    \r\n    // Initialize scores\r\n    const initialScores = {};\r\n    [...simulatedPlayers, currentPlayer].forEach(player => {\r\n      initialScores[player.name] = { kills: 0, deaths: 0 };\r\n    });\r\n    setScores(initialScores);\r\n    \r\n    // Notify parent component\r\n    if (onPlayerJoin) {\r\n      simulatedPlayers.forEach(player => {\r\n        onPlayerJoin(player);\r\n      });\r\n    }\r\n    \r\n    // Update game state\r\n    if (onGameStateUpdate) {\r\n      onGameStateUpdate({\r\n        gameId,\r\n        players: [...simulatedPlayers, currentPlayer],\r\n        teams: {\r\n          red: redTeam,\r\n          blue: blueTeam\r\n        },\r\n        scores: initialScores\r\n      });\r\n    }\r\n    \r\n    // Start game timer\r\n    startGameTimer();\r\n    \r\n    console.log(`Joined game ${gameId} with ${simulatedPlayers.length + 1} players`);\r\n  };\r\n\r\n  // Start the game timer\r\n  const startGameTimer = () => {\r\n    setGameTime(600); // 10 minutes\r\n    \r\n    // Clear any existing timer\r\n    if (gameTimerRef.current) {\r\n      clearInterval(gameTimerRef.current);\r\n    }\r\n    \r\n    // Start countdown\r\n    gameTimerRef.current = setInterval(() => {\r\n      setGameTime(prevTime => {\r\n        const newTime = prevTime - 1;\r\n        \r\n        // Update UI timer\r\n        const minutes = Math.floor(newTime / 60);\r\n        const seconds = newTime % 60;\r\n        const timerElement = document.querySelector('.game-timer');\r\n        if (timerElement) {\r\n          timerElement.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;\r\n        }\r\n        \r\n        // Check if game is over\r\n        if (newTime <= 0) {\r\n          endGame();\r\n          return 0;\r\n        }\r\n        \r\n        return newTime;\r\n      });\r\n    }, 1000);\r\n  };\r\n\r\n  // End the game\r\n  const endGame = () => {\r\n    // Clear timer\r\n    if (gameTimerRef.current) {\r\n      clearInterval(gameTimerRef.current);\r\n      gameTimerRef.current = null;\r\n    }\r\n    \r\n    // Sort players by kills\r\n    const sortedPlayers = Object.entries(scores)\r\n      .sort((a, b) => b[1].kills - a[1].kills)\r\n      .slice(0, 3); // Get top 3\r\n    \r\n    // Notify parent component\r\n    if (onGameEnd) {\r\n      onGameEnd(sortedPlayers);\r\n    }\r\n    \r\n    // After 10 seconds, start a new game\r\n    setTimeout(() => {\r\n      // Reset scores\r\n      const resetScores = {};\r\n      players.forEach(player => {\r\n        resetScores[player.name] = { kills: 0, deaths: 0 };\r\n      });\r\n      setScores(resetScores);\r\n      \r\n      // Start new game timer\r\n      startGameTimer();\r\n      \r\n      // Update game state with new map\r\n      if (onGameStateUpdate) {\r\n        onGameStateUpdate({\r\n          gameId,\r\n          players,\r\n          teams,\r\n          scores: resetScores,\r\n          newMap: true // Signal to change map\r\n        });\r\n      }\r\n    }, 10000);\r\n  };\r\n\r\n  // Generate an invite code for others to join\r\n  const generateInviteCode = () => {\r\n    return gameId || `invite_${Math.random().toString(36).substr(2, 8).toUpperCase()}`;\r\n  };\r\n\r\n  // Update player position\r\n  const updatePlayerPosition = (position, rotation) => {\r\n    if (connected && socket) {\r\n      socket.emit('update_position', {\r\n        position,\r\n        rotation\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handle player shooting\r\n  const handlePlayerShoot = (weaponType, position, direction) => {\r\n    if (connected && socket) {\r\n      socket.emit('player_shoot', {\r\n        weaponType,\r\n        position,\r\n        direction\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handle player kill\r\n  const handlePlayerKill = (killer, victim) => {\r\n    // Update scores\r\n    setScores(prev => {\r\n      const newScores = {...prev};\r\n      \r\n      // Increment killer's kills\r\n      if (newScores[killer]) {\r\n        newScores[killer].kills += 1;\r\n      }\r\n      \r\n      // Increment victim's deaths\r\n      if (newScores[victim]) {\r\n        newScores[victim].deaths += 1;\r\n      }\r\n      \r\n      return newScores;\r\n    });\r\n    \r\n    // Update scoreboard UI\r\n    updateScoreboard();\r\n  };\r\n\r\n  // Update the scoreboard UI\r\n  const updateScoreboard = () => {\r\n    const scoreboard = document.querySelector('.scoreboard tbody');\r\n    if (!scoreboard) return;\r\n    \r\n    // Clear existing rows\r\n    scoreboard.innerHTML = '';\r\n    \r\n    // Add player rows\r\n    players.forEach(player => {\r\n      const playerScore = scores[player.name] || { kills: 0, deaths: 0 };\r\n      \r\n      const row = document.createElement('tr');\r\n      row.className = `team-${player.team}`;\r\n      \r\n      row.innerHTML = `\r\n        <td>${player.name}</td>\r\n        <td>${player.team}</td>\r\n        <td>${playerScore.kills}</td>\r\n        <td>${playerScore.deaths}</td>\r\n      `;\r\n      \r\n      scoreboard.appendChild(row);\r\n    });\r\n  };\r\n\r\n  // Clean up on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (gameTimerRef.current) {\r\n        clearInterval(gameTimerRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return null; // This component doesn't render anything\r\n};\r\n\r\nexport default MultiplayerManager;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,OAASC,EAAE,KAAQ,kBAAkB,CAErC;AACA,KAAM,CAAAC,kBAAkB,CAAGC,IAAA,EAOrB,IAPsB,CAC1BC,UAAU,CACVC,UAAU,CACVC,YAAY,CACZC,aAAa,CACbC,iBAAiB,CACjBC,SACF,CAAC,CAAAN,IAAA,CACC,KAAM,CAACO,MAAM,CAAEC,SAAS,CAAC,CAAGb,QAAQ,CAAC,IAAI,CAAC,CAC1C,KAAM,CAACc,SAAS,CAAEC,YAAY,CAAC,CAAGf,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAACgB,OAAO,CAAEC,UAAU,CAAC,CAAGjB,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAACkB,MAAM,CAAEC,SAAS,CAAC,CAAGnB,QAAQ,CAAC,IAAI,CAAC,CAC1C,KAAM,CAACoB,KAAK,CAAEC,QAAQ,CAAC,CAAGrB,QAAQ,CAAC,CAAEsB,GAAG,CAAE,EAAE,CAAEC,IAAI,CAAE,EAAG,CAAC,CAAC,CACzD,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGzB,QAAQ,CAAC,CAAC,CAAC,CAAC,CACxC,KAAM,CAAC0B,QAAQ,CAAEC,WAAW,CAAC,CAAG3B,QAAQ,CAAC,GAAG,CAAC,CAAE;AAC/C,KAAM,CAAA4B,YAAY,CAAG1B,MAAM,CAAC,IAAI,CAAC,CAEjC;AACAD,SAAS,CAAC,IAAM,CACd;AACA;AACA4B,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC,CAErD;AACA,KAAM,CAAAC,eAAe,CAAG,CACtBC,EAAE,CAAE,UAAUC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,CAAE,CAAC,CAAC,EAAE,CACvDC,IAAI,CAAEA,CAACC,KAAK,CAAEC,IAAI,GAAK,CACrBV,OAAO,CAACC,GAAG,CAAC,YAAYQ,KAAK,GAAG,CAAEC,IAAI,CAAC,CACvC;AACA,GAAID,KAAK,GAAK,WAAW,CAAE,CACzBE,UAAU,CAAC,IAAM,CACfC,cAAc,CAACF,IAAI,CAAC,CACtB,CAAC,CAAE,GAAG,CAAC,CACT,CAAC,IAAM,IAAID,KAAK,GAAK,cAAc,CAAE,CACnC;AACAT,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAExB,UAAU,CAAC,CACxD,CAAC,IAAM,IAAIgC,KAAK,GAAK,iBAAiB,CAAE,CACtC;AACA;AAAA,CAEJ,CAAC,CACDI,EAAE,CAAEA,CAACJ,KAAK,CAAEK,QAAQ,GAAK,CACvBd,OAAO,CAACC,GAAG,CAAC,iBAAiBQ,KAAK,EAAE,CAAC,CACrC;AACA,GAAIA,KAAK,GAAK,eAAe,CAAE,CAC7B;AACA,KAAM,CAAAM,QAAQ,CAAGC,WAAW,CAAC,IAAM,CACjC,GAAIZ,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,EAAIlB,OAAO,CAAC8B,MAAM,CAAG,CAAC,CAAE,CAC7C,KAAM,CAAAC,SAAS,CAAG,CAChBf,EAAE,CAAE,UAAUC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,CAAE,CAAC,CAAC,EAAE,CACvDY,IAAI,CAAE,SAASf,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,CAAC,EAAE,CAChDgB,IAAI,CAAE9B,KAAK,CAACE,GAAG,CAACwB,MAAM,EAAI1B,KAAK,CAACG,IAAI,CAACuB,MAAM,CAAG,KAAK,CAAG,MAAM,CAC5DK,KAAK,CAAE,CAAC,CACRC,MAAM,CAAE,CACV,CAAC,CAEDT,QAAQ,CAACI,SAAS,CAAC,CACrB,CACF,CAAC,CAAE,KAAK,CAAC,CAET,MAAO,IAAMM,aAAa,CAACT,QAAQ,CAAC,CACtC,CACF,CAAC,CACDU,UAAU,CAAEA,CAAA,GAAM,CAChBzB,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC,CACrC,CACF,CAAC,CAEDjB,SAAS,CAACkB,eAAe,CAAC,CAC1BhB,YAAY,CAAC,IAAI,CAAC,CAElB,MAAO,IAAM,CACX,GAAIgB,eAAe,CAAE,CACnBA,eAAe,CAACuB,UAAU,CAAC,CAAC,CAC9B,CACF,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN;AACArD,SAAS,CAAC,IAAM,CACd,GAAIa,SAAS,EAAIF,MAAM,EAAIN,UAAU,CAAE,CACrCuB,OAAO,CAACC,GAAG,CAAC,UAAUxB,UAAU,0BAA0B,CAAC,CAE3D;AACAM,MAAM,CAACyB,IAAI,CAAC,WAAW,CAAE,CACvB/B,UAAU,CACVC,UAAU,CAAEA,UAAU,EAAI,IAC5B,CAAC,CAAC,CACJ,CACF,CAAC,CAAE,CAACO,SAAS,CAAEF,MAAM,CAAEN,UAAU,CAAEC,UAAU,CAAC,CAAC,CAE/C;AACA,KAAM,CAAAkC,cAAc,CAAIF,IAAI,EAAK,CAC/B;AACA,KAAM,CAAArB,MAAM,CAAGqB,IAAI,CAAChC,UAAU,EAAI,QAAQ0B,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,CAAE,CAAC,CAAC,EAAE,CACnFjB,SAAS,CAACD,MAAM,CAAC,CAEjB;AACA,KAAM,CAAAqC,OAAO,CAAG,EAAE,CAClB,KAAM,CAAAC,QAAQ,CAAG,EAAE,CAEnB;AACA,KAAM,CAAAC,gBAAgB,CAAG,CACvB,CAAEzB,EAAE,CAAE,SAAS,CAAEgB,IAAI,CAAE,SAAS,CAAEE,IAAI,CAAE,KAAK,CAAEC,KAAK,CAAE,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CACpE,CAAEpB,EAAE,CAAE,SAAS,CAAEgB,IAAI,CAAE,SAAS,CAAEE,IAAI,CAAE,MAAM,CAAEC,KAAK,CAAE,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CACrE,CAAEpB,EAAE,CAAE,SAAS,CAAEgB,IAAI,CAAE,SAAS,CAAEE,IAAI,CAAE,KAAK,CAAEC,KAAK,CAAE,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CACpE,CAAEpB,EAAE,CAAE,SAAS,CAAEgB,IAAI,CAAE,SAAS,CAAEE,IAAI,CAAE,MAAM,CAAEC,KAAK,CAAE,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CACtE,CAED;AACAK,gBAAgB,CAACC,OAAO,CAACC,MAAM,EAAI,CACjC,GAAIA,MAAM,CAACT,IAAI,GAAK,KAAK,CAAE,CACzBK,OAAO,CAACK,IAAI,CAACD,MAAM,CAACX,IAAI,CAAC,CAC3B,CAAC,IAAM,CACLQ,QAAQ,CAACI,IAAI,CAACD,MAAM,CAACX,IAAI,CAAC,CAC5B,CACF,CAAC,CAAC,CAEF;AACA,KAAM,CAAAa,iBAAiB,CAAGN,OAAO,CAACT,MAAM,EAAIU,QAAQ,CAACV,MAAM,CAAG,KAAK,CAAG,MAAM,CAC5E,KAAM,CAAAgB,aAAa,CAAG,CACpB9B,EAAE,CAAEpB,MAAM,CAACoB,EAAE,CACbgB,IAAI,CAAET,IAAI,CAACjC,UAAU,CACrB4C,IAAI,CAAEW,iBAAiB,CACvBV,KAAK,CAAE,CAAC,CACRC,MAAM,CAAE,CACV,CAAC,CAED,GAAIS,iBAAiB,GAAK,KAAK,CAAE,CAC/BN,OAAO,CAACK,IAAI,CAACE,aAAa,CAACd,IAAI,CAAC,CAClC,CAAC,IAAM,CACLQ,QAAQ,CAACI,IAAI,CAACE,aAAa,CAACd,IAAI,CAAC,CACnC,CAEA;AACA/B,UAAU,CAAC,CAAC,GAAGwC,gBAAgB,CAAEK,aAAa,CAAC,CAAC,CAChDzC,QAAQ,CAAC,CACPC,GAAG,CAAEiC,OAAO,CACZhC,IAAI,CAAEiC,QACR,CAAC,CAAC,CAEF;AACA,KAAM,CAAAO,aAAa,CAAG,CAAC,CAAC,CACxB,CAAC,GAAGN,gBAAgB,CAAEK,aAAa,CAAC,CAACJ,OAAO,CAACC,MAAM,EAAI,CACrDI,aAAa,CAACJ,MAAM,CAACX,IAAI,CAAC,CAAG,CAAEG,KAAK,CAAE,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CACtD,CAAC,CAAC,CACF3B,SAAS,CAACsC,aAAa,CAAC,CAExB;AACA,GAAIvD,YAAY,CAAE,CAChBiD,gBAAgB,CAACC,OAAO,CAACC,MAAM,EAAI,CACjCnD,YAAY,CAACmD,MAAM,CAAC,CACtB,CAAC,CAAC,CACJ,CAEA;AACA,GAAIjD,iBAAiB,CAAE,CACrBA,iBAAiB,CAAC,CAChBQ,MAAM,CACNF,OAAO,CAAE,CAAC,GAAGyC,gBAAgB,CAAEK,aAAa,CAAC,CAC7C1C,KAAK,CAAE,CACLE,GAAG,CAAEiC,OAAO,CACZhC,IAAI,CAAEiC,QACR,CAAC,CACDhC,MAAM,CAAEuC,aACV,CAAC,CAAC,CACJ,CAEA;AACAC,cAAc,CAAC,CAAC,CAEhBnC,OAAO,CAACC,GAAG,CAAC,eAAeZ,MAAM,SAASuC,gBAAgB,CAACX,MAAM,CAAG,CAAC,UAAU,CAAC,CAClF,CAAC,CAED;AACA,KAAM,CAAAkB,cAAc,CAAGA,CAAA,GAAM,CAC3BrC,WAAW,CAAC,GAAG,CAAC,CAAE;AAElB;AACA,GAAIC,YAAY,CAACqC,OAAO,CAAE,CACxBZ,aAAa,CAACzB,YAAY,CAACqC,OAAO,CAAC,CACrC,CAEA;AACArC,YAAY,CAACqC,OAAO,CAAGpB,WAAW,CAAC,IAAM,CACvClB,WAAW,CAACuC,QAAQ,EAAI,CACtB,KAAM,CAAAC,OAAO,CAAGD,QAAQ,CAAG,CAAC,CAE5B;AACA,KAAM,CAAAE,OAAO,CAAGnC,IAAI,CAACgB,KAAK,CAACkB,OAAO,CAAG,EAAE,CAAC,CACxC,KAAM,CAAAE,OAAO,CAAGF,OAAO,CAAG,EAAE,CAC5B,KAAM,CAAAG,YAAY,CAAGC,QAAQ,CAACC,aAAa,CAAC,aAAa,CAAC,CAC1D,GAAIF,YAAY,CAAE,CAChBA,YAAY,CAACG,WAAW,CAAG,GAAGL,OAAO,IAAIC,OAAO,CAAClC,QAAQ,CAAC,CAAC,CAACuC,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,EAAE,CAChF,CAEA;AACA,GAAIP,OAAO,EAAI,CAAC,CAAE,CAChBQ,OAAO,CAAC,CAAC,CACT,MAAO,EAAC,CACV,CAEA,MAAO,CAAAR,OAAO,CAChB,CAAC,CAAC,CACJ,CAAC,CAAE,IAAI,CAAC,CACV,CAAC,CAED;AACA,KAAM,CAAAQ,OAAO,CAAGA,CAAA,GAAM,CACpB;AACA,GAAI/C,YAAY,CAACqC,OAAO,CAAE,CACxBZ,aAAa,CAACzB,YAAY,CAACqC,OAAO,CAAC,CACnCrC,YAAY,CAACqC,OAAO,CAAG,IAAI,CAC7B,CAEA;AACA,KAAM,CAAAW,aAAa,CAAGC,MAAM,CAACC,OAAO,CAACtD,MAAM,CAAC,CACzCuD,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKA,CAAC,CAAC,CAAC,CAAC,CAAC9B,KAAK,CAAG6B,CAAC,CAAC,CAAC,CAAC,CAAC7B,KAAK,CAAC,CACvC+B,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE;AAEhB;AACA,GAAIvE,SAAS,CAAE,CACbA,SAAS,CAACiE,aAAa,CAAC,CAC1B,CAEA;AACApC,UAAU,CAAC,IAAM,CACf;AACA,KAAM,CAAA2C,WAAW,CAAG,CAAC,CAAC,CACtBnE,OAAO,CAAC0C,OAAO,CAACC,MAAM,EAAI,CACxBwB,WAAW,CAACxB,MAAM,CAACX,IAAI,CAAC,CAAG,CAAEG,KAAK,CAAE,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CACpD,CAAC,CAAC,CACF3B,SAAS,CAAC0D,WAAW,CAAC,CAEtB;AACAnB,cAAc,CAAC,CAAC,CAEhB;AACA,GAAItD,iBAAiB,CAAE,CACrBA,iBAAiB,CAAC,CAChBQ,MAAM,CACNF,OAAO,CACPI,KAAK,CACLI,MAAM,CAAE2D,WAAW,CACnBC,MAAM,CAAE,IAAK;AACf,CAAC,CAAC,CACJ,CACF,CAAC,CAAE,KAAK,CAAC,CACX,CAAC,CAED;AACA,KAAM,CAAAC,kBAAkB,CAAGA,CAAA,GAAM,CAC/B,MAAO,CAAAnE,MAAM,EAAI,UAAUe,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,CAAE,CAAC,CAAC,CAACkD,WAAW,CAAC,CAAC,EAAE,CACpF,CAAC,CAED;AACA,KAAM,CAAAC,oBAAoB,CAAGA,CAACC,QAAQ,CAAEC,QAAQ,GAAK,CACnD,GAAI3E,SAAS,EAAIF,MAAM,CAAE,CACvBA,MAAM,CAACyB,IAAI,CAAC,iBAAiB,CAAE,CAC7BmD,QAAQ,CACRC,QACF,CAAC,CAAC,CACJ,CACF,CAAC,CAED;AACA,KAAM,CAAAC,iBAAiB,CAAGA,CAACC,UAAU,CAAEH,QAAQ,CAAEI,SAAS,GAAK,CAC7D,GAAI9E,SAAS,EAAIF,MAAM,CAAE,CACvBA,MAAM,CAACyB,IAAI,CAAC,cAAc,CAAE,CAC1BsD,UAAU,CACVH,QAAQ,CACRI,SACF,CAAC,CAAC,CACJ,CACF,CAAC,CAED;AACA,KAAM,CAAAC,gBAAgB,CAAGA,CAACC,MAAM,CAAEC,MAAM,GAAK,CAC3C;AACAtE,SAAS,CAACuE,IAAI,EAAI,CAChB,KAAM,CAAAC,SAAS,CAAG,CAAC,GAAGD,IAAI,CAAC,CAE3B;AACA,GAAIC,SAAS,CAACH,MAAM,CAAC,CAAE,CACrBG,SAAS,CAACH,MAAM,CAAC,CAAC3C,KAAK,EAAI,CAAC,CAC9B,CAEA;AACA,GAAI8C,SAAS,CAACF,MAAM,CAAC,CAAE,CACrBE,SAAS,CAACF,MAAM,CAAC,CAAC3C,MAAM,EAAI,CAAC,CAC/B,CAEA,MAAO,CAAA6C,SAAS,CAClB,CAAC,CAAC,CAEF;AACAC,gBAAgB,CAAC,CAAC,CACpB,CAAC,CAED;AACA,KAAM,CAAAA,gBAAgB,CAAGA,CAAA,GAAM,CAC7B,KAAM,CAAAC,UAAU,CAAG5B,QAAQ,CAACC,aAAa,CAAC,mBAAmB,CAAC,CAC9D,GAAI,CAAC2B,UAAU,CAAE,OAEjB;AACAA,UAAU,CAACC,SAAS,CAAG,EAAE,CAEzB;AACApF,OAAO,CAAC0C,OAAO,CAACC,MAAM,EAAI,CACxB,KAAM,CAAA0C,WAAW,CAAG7E,MAAM,CAACmC,MAAM,CAACX,IAAI,CAAC,EAAI,CAAEG,KAAK,CAAE,CAAC,CAAEC,MAAM,CAAE,CAAE,CAAC,CAElE,KAAM,CAAAkD,GAAG,CAAG/B,QAAQ,CAACgC,aAAa,CAAC,IAAI,CAAC,CACxCD,GAAG,CAACE,SAAS,CAAG,QAAQ7C,MAAM,CAACT,IAAI,EAAE,CAErCoD,GAAG,CAACF,SAAS,CAAG;AACtB,cAAczC,MAAM,CAACX,IAAI;AACzB,cAAcW,MAAM,CAACT,IAAI;AACzB,cAAcmD,WAAW,CAAClD,KAAK;AAC/B,cAAckD,WAAW,CAACjD,MAAM;AAChC,OAAO,CAED+C,UAAU,CAACM,WAAW,CAACH,GAAG,CAAC,CAC7B,CAAC,CAAC,CACJ,CAAC,CAED;AACArG,SAAS,CAAC,IAAM,CACd,MAAO,IAAM,CACX,GAAI2B,YAAY,CAACqC,OAAO,CAAE,CACxBZ,aAAa,CAACzB,YAAY,CAACqC,OAAO,CAAC,CACrC,CACF,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,KAAI,CAAE;AACf,CAAC,CAED,cAAe,CAAA7D,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}