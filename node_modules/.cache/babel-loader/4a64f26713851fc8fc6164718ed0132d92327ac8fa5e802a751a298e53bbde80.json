{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{useThree}from'@react-three/fiber';import THREE from'../utils/ThreeShims';import Weapon,{AK47,Shotgun,Sniper,SMG}from'./Weapon';import{jsx as _jsx}from\"react/jsx-runtime\";const WeaponSystem=_ref=>{let{player,playerRef}=_ref;const{scene,raycaster,camera}=useThree();const[droppedWeapons,setDroppedWeapons]=useState([]);const[despawnTimers,setDespawnTimers]=useState({});const weaponRaycaster=useRef(new THREE.Raycaster());// Function to drop a weapon at a position\nconst dropWeapon=(weaponType,position,rotation)=>{const weaponId=`weapon_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;// Add weapon to dropped weapons list\nsetDroppedWeapons(prev=>[...prev,{id:weaponId,type:weaponType,position,rotation,droppedAt:Date.now()}]);// Set despawn timer\nconst timerId=setTimeout(()=>{// Remove weapon after 10 seconds\nsetDroppedWeapons(prev=>prev.filter(w=>w.id!==weaponId));// Clean up timer reference\nsetDespawnTimers(prev=>{const newTimers={...prev};delete newTimers[weaponId];return newTimers;});},10000);// Store timer reference\nsetDespawnTimers(prev=>({...prev,[weaponId]:timerId}));};// Function to pick up a weapon\nconst pickUpWeapon=weaponId=>{// Find the weapon\nconst weapon=droppedWeapons.find(w=>w.id===weaponId);if(!weapon)return null;// Remove from dropped weapons\nsetDroppedWeapons(prev=>prev.filter(w=>w.id!==weaponId));// Clear despawn timer\nif(despawnTimers[weaponId]){clearTimeout(despawnTimers[weaponId]);setDespawnTimers(prev=>{const newTimers={...prev};delete newTimers[weaponId];return newTimers;});}// Return the weapon type\nreturn weapon.type;};// Create a new weapon instance based on type\nconst createWeapon=type=>{switch(type){case'AK-47':return new AK47();case'Shotgun':return new Shotgun();case'Sniper':return new Sniper();case'SMG':return new SMG();default:return new AK47();// Default to AK-47\n}};// Handle shooting mechanics\nconst handleShoot=(weapon,position,direction)=>{if(!weapon||!weapon.canFire())return false;// Fire the weapon\nconst spreadAngles=weapon.fire();if(spreadAngles===false)return false;// Couldn't fire\n// For shotgun, spreadAngles is an array of angles\n// For other weapons, we just need to calculate one spread\nconst angles=Array.isArray(spreadAngles)?spreadAngles:[weapon.calculateSpread()];// Process each shot/pellet\nangles.forEach(angle=>{// Apply spread to direction\nconst spreadDirection=new THREE.Vector3().copy(direction);spreadDirection.applyAxisAngle(new THREE.Vector3(0,1,0),angle);// Create raycaster for the shot\nweaponRaycaster.current.set(position,spreadDirection);// Check for hits\nconst hits=weaponRaycaster.current.intersectObjects(scene.children,true);// Process hits\nif(hits.length>0){const hit=hits[0];// Calculate damage based on distance\nconst damage=weapon.calculateDamage(hit.distance);// Check if hit a player\nif(hit.object.parent&&hit.object.parent.name&&hit.object.parent.name.startsWith('player')){// Handle player hit\nconsole.log(`Hit player with ${damage} damage`);// In a real implementation, we would apply damage to the hit player\n// and check if they died\n}}});return true;};// Handle weapon pickup detection\nuseEffect(()=>{if(!playerRef||!playerRef.current)return;const checkForWeaponPickup=()=>{// Only check if player is close to a weapon\ndroppedWeapons.forEach(weapon=>{const playerPos=playerRef.current.position;const weaponPos=new THREE.Vector3(weapon.position[0],weapon.position[1],weapon.position[2]);// Check distance\nconst distance=playerPos.distanceTo(weaponPos);if(distance<2){// Within pickup range\n// Check if player pressed pickup key (E)\n// This would be handled in the Player component\n}});};const pickupInterval=setInterval(checkForWeaponPickup,200);return()=>{clearInterval(pickupInterval);};},[playerRef,droppedWeapons]);// Clean up timers on unmount\nuseEffect(()=>{return()=>{Object.values(despawnTimers).forEach(timerId=>{clearTimeout(timerId);});};},[despawnTimers]);// Generate a random weapon type\nconst getRandomWeaponType=()=>{const weapons=['AK-47','Shotgun','Sniper','SMG'];return weapons[Math.floor(Math.random()*weapons.length)];};// Handle player death - drop their weapon\nconst handlePlayerDeath=player=>{if(player&&player.currentWeapon){dropWeapon(player.currentWeapon.name,[player.position.x,player.position.y,player.position.z],[0,player.rotation.y,0]);}};return/*#__PURE__*/_jsx(\"group\",{children:droppedWeapons.map(weapon=>/*#__PURE__*/_jsx(Weapon,{type:weapon.type,position:weapon.position,rotation:weapon.rotation,dropped:true,onPickup:()=>pickUpWeapon(weapon.id)},weapon.id))});};export default WeaponSystem;","map":{"version":3,"names":["React","useState","useEffect","useRef","useThree","THREE","Weapon","AK47","Shotgun","Sniper","SMG","jsx","_jsx","WeaponSystem","_ref","player","playerRef","scene","raycaster","camera","droppedWeapons","setDroppedWeapons","despawnTimers","setDespawnTimers","weaponRaycaster","Raycaster","dropWeapon","weaponType","position","rotation","weaponId","Date","now","Math","random","toString","substr","prev","id","type","droppedAt","timerId","setTimeout","filter","w","newTimers","pickUpWeapon","weapon","find","clearTimeout","createWeapon","handleShoot","direction","canFire","spreadAngles","fire","angles","Array","isArray","calculateSpread","forEach","angle","spreadDirection","Vector3","copy","applyAxisAngle","current","set","hits","intersectObjects","children","length","hit","damage","calculateDamage","distance","object","parent","name","startsWith","console","log","checkForWeaponPickup","playerPos","weaponPos","distanceTo","pickupInterval","setInterval","clearInterval","Object","values","getRandomWeaponType","weapons","floor","handlePlayerDeath","currentWeapon","x","y","z","map","dropped","onPickup"],"sources":["C:/Users/ahmed/3d-shooter-game/src/game/weapons/WeaponSystem.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useThree } from '@react-three/fiber';\r\nimport THREE from '../utils/ThreeShims';\r\nimport Weapon, { AK47, Shotgun, Sniper, SMG } from './Weapon';\r\n\r\nconst WeaponSystem = ({ player, playerRef }) => {\r\n  const { scene, raycaster, camera } = useThree();\r\n  const [droppedWeapons, setDroppedWeapons] = useState([]);\r\n  const [despawnTimers, setDespawnTimers] = useState({});\r\n  const weaponRaycaster = useRef(new THREE.Raycaster());\r\n  \r\n  // Function to drop a weapon at a position\r\n  const dropWeapon = (weaponType, position, rotation) => {\r\n    const weaponId = `weapon_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n    \r\n    // Add weapon to dropped weapons list\r\n    setDroppedWeapons(prev => [\r\n      ...prev,\r\n      {\r\n        id: weaponId,\r\n        type: weaponType,\r\n        position,\r\n        rotation,\r\n        droppedAt: Date.now()\r\n      }\r\n    ]);\r\n    \r\n    // Set despawn timer\r\n    const timerId = setTimeout(() => {\r\n      // Remove weapon after 10 seconds\r\n      setDroppedWeapons(prev => prev.filter(w => w.id !== weaponId));\r\n      \r\n      // Clean up timer reference\r\n      setDespawnTimers(prev => {\r\n        const newTimers = {...prev};\r\n        delete newTimers[weaponId];\r\n        return newTimers;\r\n      });\r\n    }, 10000);\r\n    \r\n    // Store timer reference\r\n    setDespawnTimers(prev => ({\r\n      ...prev,\r\n      [weaponId]: timerId\r\n    }));\r\n  };\r\n\r\n  // Function to pick up a weapon\r\n  const pickUpWeapon = (weaponId) => {\r\n    // Find the weapon\r\n    const weapon = droppedWeapons.find(w => w.id === weaponId);\r\n    if (!weapon) return null;\r\n    \r\n    // Remove from dropped weapons\r\n    setDroppedWeapons(prev => prev.filter(w => w.id !== weaponId));\r\n    \r\n    // Clear despawn timer\r\n    if (despawnTimers[weaponId]) {\r\n      clearTimeout(despawnTimers[weaponId]);\r\n      setDespawnTimers(prev => {\r\n        const newTimers = {...prev};\r\n        delete newTimers[weaponId];\r\n        return newTimers;\r\n      });\r\n    }\r\n    \r\n    // Return the weapon type\r\n    return weapon.type;\r\n  };\r\n\r\n  // Create a new weapon instance based on type\r\n  const createWeapon = (type) => {\r\n    switch (type) {\r\n      case 'AK-47':\r\n        return new AK47();\r\n      case 'Shotgun':\r\n        return new Shotgun();\r\n      case 'Sniper':\r\n        return new Sniper();\r\n      case 'SMG':\r\n        return new SMG();\r\n      default:\r\n        return new AK47(); // Default to AK-47\r\n    }\r\n  };\r\n\r\n  // Handle shooting mechanics\r\n  const handleShoot = (weapon, position, direction) => {\r\n    if (!weapon || !weapon.canFire()) return false;\r\n    \r\n    // Fire the weapon\r\n    const spreadAngles = weapon.fire();\r\n    \r\n    if (spreadAngles === false) return false; // Couldn't fire\r\n    \r\n    // For shotgun, spreadAngles is an array of angles\r\n    // For other weapons, we just need to calculate one spread\r\n    const angles = Array.isArray(spreadAngles) ? \r\n      spreadAngles : \r\n      [weapon.calculateSpread()];\r\n    \r\n    // Process each shot/pellet\r\n    angles.forEach(angle => {\r\n      // Apply spread to direction\r\n      const spreadDirection = new THREE.Vector3().copy(direction);\r\n      spreadDirection.applyAxisAngle(new THREE.Vector3(0, 1, 0), angle);\r\n      \r\n      // Create raycaster for the shot\r\n      weaponRaycaster.current.set(position, spreadDirection);\r\n      \r\n      // Check for hits\r\n      const hits = weaponRaycaster.current.intersectObjects(scene.children, true);\r\n      \r\n      // Process hits\r\n      if (hits.length > 0) {\r\n        const hit = hits[0];\r\n        \r\n        // Calculate damage based on distance\r\n        const damage = weapon.calculateDamage(hit.distance);\r\n        \r\n        // Check if hit a player\r\n        if (hit.object.parent && hit.object.parent.name && hit.object.parent.name.startsWith('player')) {\r\n          // Handle player hit\r\n          console.log(`Hit player with ${damage} damage`);\r\n          \r\n          // In a real implementation, we would apply damage to the hit player\r\n          // and check if they died\r\n        }\r\n      }\r\n    });\r\n    \r\n    return true;\r\n  };\r\n\r\n  // Handle weapon pickup detection\r\n  useEffect(() => {\r\n    if (!playerRef || !playerRef.current) return;\r\n    \r\n    const checkForWeaponPickup = () => {\r\n      // Only check if player is close to a weapon\r\n      droppedWeapons.forEach(weapon => {\r\n        const playerPos = playerRef.current.position;\r\n        const weaponPos = new THREE.Vector3(\r\n          weapon.position[0], \r\n          weapon.position[1], \r\n          weapon.position[2]\r\n        );\r\n        \r\n        // Check distance\r\n        const distance = playerPos.distanceTo(weaponPos);\r\n        \r\n        if (distance < 2) { // Within pickup range\r\n          // Check if player pressed pickup key (E)\r\n          // This would be handled in the Player component\r\n        }\r\n      });\r\n    };\r\n    \r\n    const pickupInterval = setInterval(checkForWeaponPickup, 200);\r\n    \r\n    return () => {\r\n      clearInterval(pickupInterval);\r\n    };\r\n  }, [playerRef, droppedWeapons]);\r\n\r\n  // Clean up timers on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      Object.values(despawnTimers).forEach(timerId => {\r\n        clearTimeout(timerId);\r\n      });\r\n    };\r\n  }, [despawnTimers]);\r\n\r\n  // Generate a random weapon type\r\n  const getRandomWeaponType = () => {\r\n    const weapons = ['AK-47', 'Shotgun', 'Sniper', 'SMG'];\r\n    return weapons[Math.floor(Math.random() * weapons.length)];\r\n  };\r\n\r\n  // Handle player death - drop their weapon\r\n  const handlePlayerDeath = (player) => {\r\n    if (player && player.currentWeapon) {\r\n      dropWeapon(\r\n        player.currentWeapon.name,\r\n        [player.position.x, player.position.y, player.position.z],\r\n        [0, player.rotation.y, 0]\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <group>\r\n      {/* Render all dropped weapons */}\r\n      {droppedWeapons.map(weapon => (\r\n        <Weapon \r\n          key={weapon.id}\r\n          type={weapon.type}\r\n          position={weapon.position}\r\n          rotation={weapon.rotation}\r\n          dropped={true}\r\n          onPickup={() => pickUpWeapon(weapon.id)}\r\n        />\r\n      ))}\r\n    </group>\r\n  );\r\n};\r\n\r\nexport default WeaponSystem;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}